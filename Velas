<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sistema de Facturaci√≥n - Mundo de Velas</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <style>
        :root {
            --primary-color: #2563eb;
            --success-color: #059669;
            --danger-color: #dc2626;
            --warning-color: #d97706;
            --info-color: #0891b2;
            --dark-color: #1f2937;
            --light-color: #f8fafc;
            --border-color: #e2e8f0;
            --shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
            --shadow-lg: 0 20px 25px -5px rgba(0, 0, 0, 0.1);
            --border-radius: 12px;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            color: var(--dark-color);
            line-height: 1.6;
        }

        .main-container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
            min-height: 100vh;
        }

        .app-header {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: var(--border-radius);
            padding: 20px 30px;
            margin-bottom: 30px;
            box-shadow: var(--shadow-lg);
            display: flex;
            justify-content: space-between;
            align-items: center;
            flex-wrap: wrap;
            gap: 20px;
        }

        .logo-section {
            display: flex;
            align-items: center;
            gap: 15px;
        }

        .logo {
            width: 50px;
            height: 50px;
            background: linear-gradient(135deg, var(--primary-color), var(--info-color));
            border-radius: 12px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 24px;
            color: white;
        }

        .app-title h1 {
            font-size: 24px;
            font-weight: 700;
            color: var(--dark-color);
            margin-bottom: 5px;
        }

        .app-title p {
            color: #64748b;
            font-size: 14px;
        }

        .nav-pills {
            display: flex;
            background: var(--light-color);
            border-radius: var(--border-radius);
            padding: 4px;
            gap: 4px;
        }

        .nav-pill {
            padding: 12px 20px;
            border-radius: 8px;
            background: transparent;
            border: none;
            cursor: pointer;
            font-weight: 500;
            color: #64748b;
            transition: all 0.2s ease;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .nav-pill.active {
            background: white;
            color: var(--primary-color);
            box-shadow: var(--shadow);
        }

        .nav-pill:hover:not(.active) {
            color: var(--dark-color);
            background: rgba(255, 255, 255, 0.5);
        }

        .content-area {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: var(--border-radius);
            box-shadow: var(--shadow-lg);
            min-height: 600px;
            overflow: hidden;
        }

        .view {
            display: none;
            padding: 30px;
            animation: fadeIn 0.3s ease;
        }

        .view.active {
            display: block;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }

        /* Dashboard/Lista de Facturas */
        .dashboard-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 30px;
            flex-wrap: wrap;
            gap: 20px;
        }

        .dashboard-title {
            font-size: 28px;
            font-weight: 700;
            color: var(--dark-color);
        }

        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }

        .stat-card {
            background: linear-gradient(135deg, #f8fafc, #e2e8f0);
            border-radius: var(--border-radius);
            padding: 24px;
            text-align: center;
            border-left: 4px solid var(--primary-color);
        }

        .stat-value {
            font-size: 32px;
            font-weight: 700;
            color: var(--primary-color);
            margin-bottom: 8px;
        }

        .stat-label {
            color: #64748b;
            font-weight: 500;
        }

        .invoices-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));
            gap: 24px;
        }

        .invoice-card {
            background: white;
            border-radius: var(--border-radius);
            padding: 24px;
            box-shadow: var(--shadow);
            border: 1px solid var(--border-color);
            transition: all 0.2s ease;
            cursor: pointer;
        }

        .invoice-card:hover {
            transform: translateY(-2px);
            box-shadow: var(--shadow-lg);
        }

        .invoice-header {
            display: flex;
            justify-content: space-between;
            align-items: start;
            margin-bottom: 16px;
        }

        .invoice-number {
            font-size: 18px;
            font-weight: 600;
            color: var(--primary-color);
        }

        .invoice-date {
            font-size: 14px;
            color: #64748b;
        }

        .client-name {
            font-size: 16px;
            font-weight: 500;
            color: var(--dark-color);
            margin-bottom: 12px;
        }

        .invoice-amount {
            font-size: 24px;
            font-weight: 700;
            color: var(--success-color);
            margin-bottom: 20px;
        }

        .card-actions {
            display: flex;
            gap: 8px;
            justify-content: flex-end;
        }

        .action-btn {
            padding: 8px 12px;
            border-radius: 8px;
            border: none;
            cursor: pointer;
            font-size: 12px;
            font-weight: 500;
            transition: all 0.2s ease;
            display: flex;
            align-items: center;
            gap: 4px;
        }

        .action-btn:hover {
            transform: translateY(-1px);
        }

        .btn-primary { background: var(--primary-color); color: white; }
        .btn-success { background: var(--success-color); color: white; }
        .btn-info { background: var(--info-color); color: white; }
        .btn-danger { background: var(--danger-color); color: white; }
        .btn-outline { background: white; border: 2px solid var(--border-color); color: var(--dark-color); }

        /* Formulario */
        .form-container {
            max-width: 800px;
            margin: 0 auto;
        }

        .form-header {
            text-align: center;
            margin-bottom: 40px;
        }

        .form-title {
            font-size: 28px;
            font-weight: 700;
            color: var(--dark-color);
            margin-bottom: 8px;
        }

        .form-subtitle {
            color: #64748b;
        }

        .form-section {
            background: var(--light-color);
            border-radius: var(--border-radius);
            padding: 24px;
            margin-bottom: 24px;
        }

        .section-title {
            font-size: 18px;
            font-weight: 600;
            color: var(--dark-color);
            margin-bottom: 20px;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .form-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
        }

        .form-group {
            display: flex;
            flex-direction: column;
        }

        .form-label {
            font-weight: 500;
            color: var(--dark-color);
            margin-bottom: 8px;
            display: flex;
            align-items: center;
            gap: 4px;
        }

        .required {
            color: var(--danger-color);
        }

        .form-input {
            padding: 12px 16px;
            border: 2px solid var(--border-color);
            border-radius: 8px;
            font-size: 16px;
            transition: all 0.2s ease;
            background: white;
        }

        .form-input:focus {
            outline: none;
            border-color: var(--primary-color);
            box-shadow: 0 0 0 3px rgba(37, 99, 235, 0.1);
        }

        .items-section {
            background: white;
            border-radius: var(--border-radius);
            padding: 24px;
            border: 2px dashed var(--border-color);
        }

        .items-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }

        .add-item-btn {
            padding: 10px 20px;
            background: var(--success-color);
            color: white;
            border: none;
            border-radius: 8px;
            font-weight: 500;
            cursor: pointer;
            display: flex;
            align-items: center;
            gap: 8px;
            transition: all 0.2s ease;
        }

        .add-item-btn:hover {
            background: #047857;
            transform: translateY(-1px);
        }

        .items-table {
            width: 100%;
            border-collapse: collapse;
            margin-bottom: 20px;
        }

        .items-table th {
            background: var(--light-color);
            padding: 12px;
            text-align: left;
            font-weight: 600;
            color: var(--dark-color);
            border-bottom: 2px solid var(--border-color);
        }

        .item-row {
            border-bottom: 1px solid var(--border-color);
        }

        .item-row td {
            padding: 12px;
            vertical-align: middle;
        }

        .item-input {
            width: 100%;
            padding: 8px 12px;
            border: 1px solid var(--border-color);
            border-radius: 6px;
            font-size: 14px;
        }

        .subtotal {
            font-weight: 600;
            color: var(--success-color);
            text-align: right;
        }

        .remove-item {
            background: var(--danger-color);
            color: white;
            border: none;
            border-radius: 6px;
            padding: 6px;
            cursor: pointer;
            font-size: 12px;
        }

        .total-section {
            background: linear-gradient(135deg, var(--success-color), #059669);
            color: white;
            border-radius: var(--border-radius);
            padding: 24px;
            text-align: right;
            margin-top: 24px;
        }

        .total-label {
            font-size: 18px;
            margin-bottom: 8px;
        }

        .total-amount {
            font-size: 36px;
            font-weight: 700;
        }

        .form-actions {
            display: flex;
            gap: 16px;
            justify-content: center;
            margin-top: 32px;
            flex-wrap: wrap;
        }

        .form-btn {
            padding: 12px 32px;
            border-radius: var(--border-radius);
            border: none;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.2s ease;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .form-btn:hover {
            transform: translateY(-2px);
        }

        /* Vista de Factura */
        .invoice-document {
            max-width: 800px;
            margin: 0 auto;
            background: white;
            border-radius: var(--border-radius);
            padding: 40px;
            box-shadow: var(--shadow-lg);
        }

        .doc-header {
            text-align: center;
            margin-bottom: 40px;
            padding-bottom: 20px;
            border-bottom: 3px solid var(--primary-color);
        }

        .doc-title {
            font-size: 36px;
            font-weight: 700;
            color: var(--dark-color);
            margin-bottom: 8px;
        }

        .doc-number {
            font-size: 20px;
            color: var(--primary-color);
            font-weight: 600;
        }

        .doc-info {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 40px;
            margin-bottom: 40px;
        }

        .info-section {
            background: var(--light-color);
            border-radius: var(--border-radius);
            padding: 24px;
        }

        .info-title {
            font-size: 16px;
            font-weight: 600;
            color: var(--dark-color);
            margin-bottom: 16px;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .info-content p {
            margin-bottom: 8px;
            color: #4b5563;
        }

        .doc-table {
            width: 100%;
            border-collapse: collapse;
            margin: 32px 0;
            border-radius: var(--border-radius);
            overflow: hidden;
            box-shadow: var(--shadow);
        }

        .doc-table th {
            background: var(--primary-color);
            color: white;
            padding: 16px;
            text-align: left;
            font-weight: 600;
        }

        .doc-table td {
            padding: 16px;
            border-bottom: 1px solid var(--border-color);
        }

        .doc-table tr:nth-child(even) {
            background: var(--light-color);
        }

        .doc-table .text-right {
            text-align: right;
        }

        .doc-total {
            background: var(--success-color) !important;
            color: white !important;
            font-weight: 700;
        }

        .doc-footer {
            text-align: center;
            margin-top: 40px;
            padding-top: 24px;
            border-top: 1px solid var(--border-color);
            color: #64748b;
        }

        .export-actions {
            display: flex;
            gap: 16px;
            justify-content: center;
            margin-bottom: 32px;
            flex-wrap: wrap;
        }

        /* Estado vac√≠o */
        .empty-state {
            text-align: center;
            padding: 80px 20px;
            color: #64748b;
        }

        .empty-icon {
            font-size: 64px;
            margin-bottom: 24px;
            opacity: 0.5;
        }

        .empty-title {
            font-size: 24px;
            font-weight: 600;
            margin-bottom: 12px;
            color: var(--dark-color);
        }

        .empty-text {
            font-size: 16px;
            margin-bottom: 32px;
        }

        /* Responsive */
        @media (max-width: 768px) {
            .main-container {
                padding: 15px;
            }

            .app-header {
                flex-direction: column;
                text-align: center;
            }

            .nav-pills {
                width: 100%;
                justify-content: center;
            }

            .view {
                padding: 20px;
            }

            .dashboard-header {
                flex-direction: column;
                text-align: center;
            }

            .invoices-grid {
                grid-template-columns: 1fr;
            }

            .form-grid {
                grid-template-columns: 1fr;
            }

            .doc-info {
                grid-template-columns: 1fr;
                gap: 20px;
            }

            .invoice-document {
                padding: 20px;
            }

            .items-table,
            .doc-table {
                font-size: 14px;
            }

            .items-table th,
            .items-table td,
            .doc-table th,
            .doc-table td {
                padding: 8px;
            }

            .form-actions,
            .export-actions {
                flex-direction: column;
                align-items: center;
            }

            .form-btn {
                width: 100%;
                max-width: 300px;
                justify-content: center;
            }
        }

        /* Animaciones adicionales */
        .invoice-card {
            animation: slideUp 0.3s ease;
        }

        @keyframes slideUp {
            from {
                opacity: 0;
                transform: translateY(20px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        /* Loading state */
        .loading {
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 40px;
        }

        .spinner {
            width: 32px;
            height: 32px;
            border: 3px solid var(--border-color);
            border-top: 3px solid var(--primary-color);
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            from { transform: rotate(0deg); }
            to { transform: rotate(360deg); }
        }

        /* Tooltips */
        .tooltip {
            position: relative;
        }

        .tooltip::after {
            content: attr(data-tooltip);
            position: absolute;
            bottom: 100%;
            left: 50%;
            transform: translateX(-50%);
            background: var(--dark-color);
            color: white;
            padding: 4px 8px;
            border-radius: 4px;
            font-size: 12px;
            white-space: nowrap;
            opacity: 0;
            pointer-events: none;
            transition: opacity 0.2s ease;
        }

        .tooltip:hover::after {
            opacity: 1;
        }
    </style>
</head>
<body>
    <div class="main-container">
        <!-- Header de la aplicaci√≥n -->
        <header class="app-header">
            <div class="logo-section">
                <div class="logo">üïØÔ∏è</div>
                <div class="app-title">
                    <h1>Sistema de Facturaci√≥n</h1>
                    <p>Mundo de Velas - Gesti√≥n profesional</p>
                </div>
            </div>
            
            <nav class="nav-pills">
                <button class="nav-pill active" id="dashboardTab" onclick="showView('dashboard')">
                    üìä Dashboard
                </button>
                <button class="nav-pill" id="createTab" onclick="showView('create')">
                    ‚ûï Nueva Factura
                </button>
            </nav>
        </header>

        <!-- √Årea de contenido -->
        <main class="content-area">
            <!-- Dashboard / Lista de Facturas -->
            <div id="dashboardView" class="view active">
                <div class="dashboard-header">
                    <h2 class="dashboard-title">Dashboard de Facturas</h2>
                </div>

                <!-- Estad√≠sticas -->
                <div class="stats-grid">
                    <div class="stat-card">
                        <div class="stat-value" id="totalInvoices">0</div>
                        <div class="stat-label">Facturas Creadas</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-value" id="totalAmount">$0</div>
                        <div class="stat-label">Monto Total</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-value" id="thisMonth">0</div>
                        <div class="stat-label">Este Mes</div>
                    </div>
                </div>

                <!-- Lista de facturas -->
                <div id="invoicesList">
                    <div class="empty-state">
                        <div class="empty-icon">üìÑ</div>
                        <h3 class="empty-title">No hay facturas creadas</h3>
                        <p class="empty-text">Comienza creando tu primera factura para ver el dashboard completo</p>
                        <button class="form-btn btn-primary" onclick="showView('create')">
                            ‚ûï Crear Primera Factura
                        </button>
                    </div>
                </div>
            </div>

            <!-- Crear/Editar Factura -->
            <div id="createView" class="view">
                <div class="form-container">
                    <div class="form-header">
                        <h2 class="form-title" id="formTitle">Nueva Factura</h2>
                        <p class="form-subtitle">Complete todos los campos requeridos</p>
                    </div>

                    <form id="invoiceForm">
                        <!-- Informaci√≥n de la factura -->
                        <div class="form-section">
                            <h3 class="section-title">üìã Informaci√≥n de la Factura</h3>
                            <div class="form-grid">
                                <div class="form-group">
                                    <label class="form-label">N√∫mero de Factura</label>
                                    <input type="text" id="invoiceNumber" class="form-input" 
                                           placeholder="Se generar√° autom√°ticamente">
                                </div>
                                <div class="form-group">
                                    <label class="form-label">Fecha <span class="required">*</span></label>
                                    <input type="date" id="invoiceDate" class="form-input" required>
                                </div>
                            </div>
                        </div>

                        <!-- Informaci√≥n del cliente -->
                        <div class="form-section">
                            <h3 class="section-title">üë§ Informaci√≥n del Cliente</h3>
                            <div class="form-grid">
                                <div class="form-group">
                                    <label class="form-label">Nombre del Cliente <span class="required">*</span></label>
                                    <input type="text" id="clientName" class="form-input" 
                                           placeholder="Nombre completo" required>
                                </div>
                                <div class="form-group">
                                    <label class="form-label">Tel√©fono</label>
                                    <input type="tel" id="clientPhone" class="form-input" 
                                           placeholder="+1 (555) 123-4567">
                                </div>
                            </div>
                            <div class="form-group">
                                <label class="form-label">Direcci√≥n</label>
                                <textarea id="clientAddress" class="form-input" rows="2" 
                                          placeholder="Direcci√≥n completa del cliente"></textarea>
                            </div>
                        </div>

                        <!-- Items de la factura -->
                        <div class="form-section">
                            <div class="items-header">
                                <h3 class="section-title">üõí Items de la Factura</h3>
                                <button type="button" class="add-item-btn" onclick="addItem()">
                                    ‚ûï Agregar Item
                                </button>
                            </div>

                            <div class="items-section">
                                <table class="items-table">
                                    <thead>
                                        <tr>
                                            <th style="width: 40%">Descripci√≥n</th>
                                            <th style="width: 15%">Cantidad</th>
                                            <th style="width: 20%">Precio</th>
                                            <th style="width: 20%">Subtotal</th>
                                            <th style="width: 5%"></th>
                                        </tr>
                                    </thead>
                                    <tbody id="itemsList">
                                        <!-- Items se agregan aqu√≠ din√°micamente -->
                                    </tbody>
                                </table>
                            </div>
                        </div>

                        <!-- Total -->
                        <div class="total-section">
                            <div class="total-label">Total a Pagar:</div>
                            <div class="total-amount" id="totalAmount">$0.00</div>
                        </div>

                        <!-- Acciones del formulario -->
                        <div class="form-actions">
                            <button type="button" class="form-btn btn-outline" onclick="cancelForm()">
                                ‚ùå Cancelar
                            </button>
                            <button type="submit" class="form-btn btn-success">
                                üíæ Guardar Factura
                            </button>
                        </div>
                    </form>
                </div>
            </div>

            <!-- Ver Factura -->
            <div id="viewView" class="view">
                <div class="export-actions">
                    <button class="form-btn btn-outline" onclick="showView('dashboard')">
                        ‚¨ÖÔ∏è Volver al Dashboard
                    </button>
                    <button class="form-btn btn-info" onclick="exportToPNG()">
                        üì∏ Exportar PNG
                    </button>
                    <button class="form-btn btn-success" onclick="exportToExcel()">
                        üìä Exportar Excel
                    </button>
                    <button class="form-btn btn-primary" onclick="printInvoice()">
                        üñ®Ô∏è Imprimir
                    </button>
                </div>

                <div id="invoiceDocument" class="invoice-document">
                    <!-- El contenido de la factura se genera aqu√≠ -->
                </div>
            </div>
        </main>
    </div>

    <script>
        // Estado de la aplicaci√≥n
        let invoices = JSON.parse(localStorage.getItem('invoices') || '[]');
        let currentView = 'dashboard';
        let editingInvoice = null;
        let currentInvoice = null;

        // Inicializaci√≥n
        document.addEventListener('DOMContentLoaded', function() {
            // Establecer fecha actual
            document.getElementById('invoiceDate').value = new Date().toISOString().split('T')[0];
            
            // Agregar primer item
            addItem();
            
            // Actualizar dashboard
            updateDashboard();
            updateInvoicesList();
        });

        // Navegaci√≥n entre vistas
        function showView(viewName) {
            // Ocultar todas las vistas
            document.querySelectorAll('.view').forEach(view => {
                view.classList.remove('active');
            });
            
            // Mostrar vista seleccionada
            document.getElementById(viewName + 'View').classList.add('active');
            
            // Actualizar tabs
            document.querySelectorAll('.nav-pill').forEach(tab => {
                tab.classList.remove('active');
            });
            
            if (viewName === 'dashboard') {
                document.getElementById('dashboardTab').classList.add('active');
                updateDashboard();
                updateInvoicesList();
            } else if (viewName === 'create') {
                document.getElementById('createTab').classList.add('active');
                document.getElementById('formTitle').textContent = 
                    editingInvoice ? 'Editar Factura' : 'Nueva Factura';
            }
            
            currentView = viewName;
        }

        // Generar n√∫mero de factura
        function generateInvoiceNumber() {
            const date = new Date();
            const year = date.getFullYear();
            const month = String(date.getMonth() + 1).padStart(2, '0');
            const number = String(invoices.length + 1).padStart(4, '0');
            return `FAC-${year}${month}-${number}`;
        }

        // Agregar nuevo item
        function addItem() {
            const itemsList = document.getElementById('itemsList');
            const itemIndex = itemsList.children.length;
            
            const row = document.createElement('tr');
            row.className = 'item-row';
            row.innerHTML = `
                <td>
                    <input type="text" class="item-input" placeholder="Descripci√≥n del producto o servicio" 
                           onchange="updateTotal()" required>
                </td>
                <td>
                    <input type="number" class="item-input" value="1" min="1" 
                           onchange="updateTotal()" style="text-align: center;">
                </td>
                <td>
                    <input type="number" class="item-input" value="0" min="0" step="0.01" 
                           onchange="updateTotal()" style="text-align: right;">
                </td>
                <td class="subtotal">$0.00</td>
                <td>
                    <button type="button" class="remove-item tooltip" onclick="removeItem(this)" 
                            data-tooltip="Eliminar item">
                        üóëÔ∏è
                    </button>
                </td>
            `;
            
            itemsList.appendChild(row);
            updateTotal();
        }

        // Eliminar item
        function removeItem(button) {
            const itemsList = document.getElementById('itemsList');
            if (itemsList.children.length > 1) {
                button.closest('tr').remove();
                updateTotal();
            } else {
                alert('‚ö†Ô∏è Debe haber al menos un item en la factura');
            }
        }

        // Actualizar total
        function updateTotal() {
            const items = document.querySelectorAll('#itemsList .item-row');
            let total = 0;
            
            items.forEach(row => {
                const quantity = parseFloat(row.children[1].querySelector('input').value) || 0;
                const price = parseFloat(row.children[2].querySelector('input').value) || 0;
                const subtotal = quantity * price;
                
                row.children[3].textContent = `$${subtotal.toFixed(2)}`;
                total += subtotal;
            });
            
            document.getElementById('totalAmount').textContent = `$${total.toFixed(2)}`;
        }

        // Manejar env√≠o del formulario
        document.getElementById('invoiceForm').addEventListener('submit', function(e) {
            e.preventDefault();
            
            // Validar que hay al menos un item v√°lido
            const items = [];
            const itemRows = document.querySelectorAll('#itemsList .item-row');
            
            itemRows.forEach(row => {
                const description = row.children[0].querySelector('input').value.trim();
                const quantity = parseFloat(row.children[1].querySelector('input').value) || 0;
                const price = parseFloat(row.children[2].querySelector('input').value) || 0;
                
                if (description && quantity > 0 && price >= 0) {
                    items.push({ description, quantity, price });
                }
            });
            
            if (items.length === 0) {
                alert('‚ö†Ô∏è Debe agregar al menos un item v√°lido');
                return;
            }
            
            // Calcular total
            const total = items.reduce((sum, item) => sum + (item.quantity * item.price), 0);
            
            // Crear objeto factura
            const invoice = {
                id: editingInvoice ? editingInvoice.id : Date.now(),
                number: document.getElementById('invoiceNumber').value || generateInvoiceNumber(),
                date: document.getElementById('invoiceDate').value,
                clientName: document.getElementById('clientName').value,
                clientAddress: document.getElementById('clientAddress').value,
                clientPhone: document.getElementById('clientPhone').value,
                items: items,
                total: total,
                createdAt: editingInvoice ? editingInvoice.createdAt : new Date().toISOString(),
                updatedAt: new Date().toISOString()
            };
            
            // Guardar o actualizar factura
            if (editingInvoice) {
                const index = invoices.findIndex(inv => inv.id === editingInvoice.id);
                invoices[index] = invoice;
                editingInvoice = null;
            } else {
                invoices.push(invoice);
            }
            
            // Guardar en localStorage
            localStorage.setItem('invoices', JSON.stringify(invoices));
            
            // Limpiar formulario
            resetForm();
            
            // Mostrar mensaje de √©xito y volver al dashboard
            alert('‚úÖ Factura guardada correctamente');
            showView('dashboard');
        });

        // Resetear formulario
        function resetForm() {
            document.getElementById('invoiceForm').reset();
            document.getElementById('invoiceDate').value = new Date().toISOString().split('T')[0];
            document.getElementById('itemsList').innerHTML = '';
            addItem();
            editingInvoice = null;
        }

        // Cancelar formulario
        function cancelForm() {
            if (confirm('¬øEst√°s seguro de cancelar? Se perder√°n los cambios no guardados.')) {
                resetForm();
                showView('dashboard');
            }
        }

        // Actualizar dashboard con estad√≠sticas
        function updateDashboard() {
            const totalInvoicesEl = document.getElementById('totalInvoices');
            const totalAmountEl = document.getElementById('totalAmount');
            const thisMonthEl = document.getElementById('thisMonth');
            
            // Total de facturas
            totalInvoicesEl.textContent = invoices.length;
            
            // Monto total
            const totalAmount = invoices.reduce((sum, inv) => sum + inv.total, 0);
            totalAmountEl.textContent = `$${totalAmount.toLocaleString('es-ES', {minimumFractionDigits: 2})}`;
            
            // Facturas de este mes
            const currentMonth = new Date().getMonth();
            const currentYear = new Date().getFullYear();
            const thisMonthCount = invoices.filter(inv => {
                const invDate = new Date(inv.date);
                return invDate.getMonth() === currentMonth && invDate.getFullYear() === currentYear;
            }).length;
            thisMonthEl.textContent = thisMonthCount;
        }

        // Actualizar lista de facturas
        function updateInvoicesList() {
            const container = document.getElementById('invoicesList');
            
            if (invoices.length === 0) {
                container.innerHTML = `
                    <div class="empty-state">
                        <div class="empty-icon">üìÑ</div>
                        <h3 class="empty-title">No hay facturas creadas</h3>
                        <p class="empty-text">Comienza creando tu primera factura para ver el dashboard completo</p>
                        <button class="form-btn btn-primary" onclick="showView('create')">
                            ‚ûï Crear Primera Factura
                        </button>
                    </div>
                `;
                return;
            }
            
            // Ordenar facturas por fecha (m√°s recientes primero)
            const sortedInvoices = [...invoices].sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));
            
            container.innerHTML = `
                <div class="invoices-grid">
                    ${sortedInvoices.map(invoice => `
                        <div class="invoice-card" onclick="viewInvoice(${invoice.id})">
                            <div class="invoice-header">
                                <div class="invoice-number">${invoice.number}</div>
                                <div class="invoice-date">${formatDate(invoice.date)}</div>
                            </div>
                            <div class="client-name">üë§ ${invoice.clientName}</div>
                            <div class="invoice-amount">$${invoice.total.toLocaleString('es-ES', {minimumFractionDigits: 2})}</div>
                            <div class="card-actions" onclick="event.stopPropagation()">
                                <button class="action-btn btn-primary tooltip" onclick="editInvoice(${invoice.id})" 
                                        data-tooltip="Editar factura">
                                    ‚úèÔ∏è Editar
                                </button>
                                <button class="action-btn btn-info tooltip" onclick="viewInvoice(${invoice.id})" 
                                        data-tooltip="Ver factura">
                                    üëÄ Ver
                                </button>
                                <button class="action-btn btn-success tooltip" onclick="quickExportExcel(${invoice.id})" 
                                        data-tooltip="Exportar Excel">
                                    üìä Excel
                                </button>
                                <button class="action-btn btn-danger tooltip" onclick="deleteInvoice(${invoice.id})" 
                                        data-tooltip="Eliminar factura">
                                    üóëÔ∏è Eliminar
                                </button>
                            </div>
                        </div>
                    `).join('')}
                </div>
            `;
        }

        // Formatear fecha
        function formatDate(dateString) {
            const options = { 
                year: 'numeric', 
                month: 'short', 
                day: 'numeric' 
            };
            return new Date(dateString).toLocaleDateString('es-ES', options);
        }

        // Editar factura
        function editInvoice(id) {
            const invoice = invoices.find(inv => inv.id === id);
            if (!invoice) return;
            
            editingInvoice = invoice;
            
            // Llenar formulario con datos de la factura
            document.getElementById('invoiceNumber').value = invoice.number;
            document.getElementById('invoiceDate').value = invoice.date;
            document.getElementById('clientName').value = invoice.clientName;
            document.getElementById('clientAddress').value = invoice.clientAddress || '';
            document.getElementById('clientPhone').value = invoice.clientPhone || '';
            
            // Limpiar items existentes
            document.getElementById('itemsList').innerHTML = '';
            
            // Agregar items de la factura
            invoice.items.forEach((item, index) => {
                addItem();
                const row = document.getElementById('itemsList').lastElementChild;
                row.children[0].querySelector('input').value = item.description;
                row.children[1].querySelector('input').value = item.quantity;
                row.children[2].querySelector('input').value = item.price;
            });
            
            updateTotal();
            showView('create');
        }

        // Ver factura
        function viewInvoice(id) {
            const invoice = invoices.find(inv => inv.id === id);
            if (!invoice) return;
            
            currentInvoice = invoice;
            
            // Generar documento de factura
            document.getElementById('invoiceDocument').innerHTML = `
                <div class="doc-header">
                    <h1 class="doc-title">FACTURA</h1>
                    <div class="doc-number">${invoice.number}</div>
                </div>
                
                <div class="doc-info">
                    <div class="info-section">
                        <div class="info-title">üè¢ MUNDO DE VELAS</div>
                        <div class="info-content">
                            <p><strong>Email:</strong> info@mundodevelas.com</p>
                            <p><strong>Tel√©fono:</strong> +1 (555) 123-4567</p>
                            <p><strong>Sitio Web:</strong> www.mundodevelas.com</p>
                            <p><strong>Direcci√≥n:</strong> Av. Principal 123, Ciudad</p>
                        </div>
                    </div>
                    
                    <div class="info-section">
                        <div class="info-title">üë§ FACTURAR A</div>
                        <div class="info-content">
                            <p><strong>${invoice.clientName}</strong></p>
                            ${invoice.clientAddress ? `<p>üìç ${invoice.clientAddress}</p>` : ''}
                            ${invoice.clientPhone ? `<p>üìû ${invoice.clientPhone}</p>` : ''}
                            <p><strong>üìÖ Fecha:</strong> ${formatDate(invoice.date)}</p>
                            <p><strong>üìÖ Creada:</strong> ${formatDate(invoice.createdAt)}</p>
                        </div>
                    </div>
                </div>
                
                <table class="doc-table">
                    <thead>
                        <tr>
                            <th>Descripci√≥n</th>
                            <th class="text-right">Cantidad</th>
                            <th class="text-right">Precio Unitario</th>
                            <th class="text-right">Subtotal</th>
                        </tr>
                    </thead>
                    <tbody>
                        ${invoice.items.map(item => `
                            <tr>
                                <td>${item.description}</td>
                                <td class="text-right">${item.quantity}</td>
                                <td class="text-right">$${item.price.toFixed(2)}</td>
                                <td class="text-right">$${(item.quantity * item.price).toFixed(2)}</td>
                            </tr>
                        `).join('')}
                        <tr class="doc-total">
                            <td colspan="3"><strong>TOTAL A PAGAR</strong></td>
                            <td class="text-right"><strong>$${invoice.total.toFixed(2)}</strong></td>
                        </tr>
                    </tbody>
                </table>
                
                <div class="doc-footer">
                    <p><strong>¬°Gracias por su preferencia!</strong></p>
                    <p>Factura generada digitalmente el ${new Date().toLocaleString('es-ES')}</p>
                    <p style="margin-top: 16px; font-size: 12px; color: #9ca3af;">
                        Esta factura es v√°lida sin firma ni sello | Sistema de Facturaci√≥n Digital
                    </p>
                </div>
            `;
            
            showView('view');
        }

        // Eliminar factura
        function deleteInvoice(id) {
            const invoice = invoices.find(inv => inv.id === id);
            if (!invoice) return;
            
            if (confirm(`¬øEst√°s seguro de eliminar la factura ${invoice.number}?\n\nEsta acci√≥n no se puede deshacer.`)) {
                invoices = invoices.filter(inv => inv.id !== id);
                localStorage.setItem('invoices', JSON.stringify(invoices));
                updateDashboard();
                updateInvoicesList();
                
                // Mostrar mensaje de √©xito
                const notification = document.createElement('div');
                notification.style.cssText = `
                    position: fixed;
                    top: 20px;
                    right: 20px;
                    background: var(--success-color);
                    color: white;
                    padding: 16px 24px;
                    border-radius: 8px;
                    box-shadow: var(--shadow-lg);
                    z-index: 1000;
                    animation: slideIn 0.3s ease;
                `;
                notification.textContent = '‚úÖ Factura eliminada correctamente';
                document.body.appendChild(notification);
                
                setTimeout(() => {
                    notification.remove();
                }, 3000);
            }
        }

        // Exportar a PNG
        function exportToPNG() {
            if (!currentInvoice) return;
            
            const element = document.getElementById('invoiceDocument');
            const exportBtn = document.querySelector('[onclick="exportToPNG()"]');
            
            // Cambiar estado del bot√≥n
            exportBtn.textContent = 'üì∏ Exportando...';
            exportBtn.disabled = true;
            
            html2canvas(element, {
                scale: 2,
                useCORS: true,
                backgroundColor: '#ffffff',
                width: element.scrollWidth,
                height: element.scrollHeight
            }).then(canvas => {
                // Crear enlace de descarga
                const link = document.createElement('a');
                link.download = `Factura_${currentInvoice.number}.png`;
                link.href = canvas.toDataURL('image/png');
                link.click();
                
                // Mostrar mensaje de √©xito
                alert('‚úÖ Factura exportada como imagen PNG');
                
                // Restaurar bot√≥n
                exportBtn.textContent = 'üì∏ Exportar PNG';
                exportBtn.disabled = false;
            }).catch(error => {
                alert('‚ùå Error al exportar la imagen: ' + error.message);
                exportBtn.textContent = 'üì∏ Exportar PNG';
                exportBtn.disabled = false;
            });
        }

        // Exportar a Excel
        function exportToExcel() {
            if (!currentInvoice) return;
            
            const wb = XLSX.utils.book_new();
            
            // Crear datos para la hoja de c√°lculo
            const wsData = [
                ['FACTURA', currentInvoice.number],
                [''],
                ['MUNDO DE VELAS'],
                ['Email: info@mundodevelas.com'],
                ['Tel√©fono: +1 (555) 123-4567'],
                ['Sitio Web: www.mundodevelas.com'],
                [''],
                ['CLIENTE:', currentInvoice.clientName],
                ['FECHA:', formatDate(currentInvoice.date)],
                [''],
                ['DETALLE DE PRODUCTOS/SERVICIOS'],
                ['Descripci√≥n', 'Cantidad', 'Precio Unitario', 'Subtotal']
            ];
            
            // Agregar items
            currentInvoice.items.forEach(item => {
                wsData.push([
                    item.description,
                    item.quantity,
                    item.price,
                    item.quantity * item.price
                ]);
            });
            
            // Agregar total
            wsData.push(['']);
            wsData.push(['', '', 'TOTAL:', currentInvoice.total]);
            
            // Crear hoja de c√°lculo
            const ws = XLSX.utils.aoa_to_sheet(wsData);
            
            // Ajustar ancho de columnas
            ws['!cols'] = [
                { width: 40 },
                { width: 15 },
                { width: 20 },
                { width: 20 }
            ];
            
            // Agregar hoja al libro
            XLSX.utils.book_append_sheet(wb, ws, `Factura_${currentInvoice.number}`);
            
            // Descargar archivo
            XLSX.writeFile(wb, `Factura_${currentInvoice.number}.xlsx`);
            
            alert('‚úÖ Factura exportada como archivo Excel');
        }

        // Exportaci√≥n r√°pida desde el dashboard
        function quickExportExcel(id) {
            const invoice = invoices.find(inv => inv.id === id);
            if (!invoice) return;
            
            currentInvoice = invoice;
            exportToExcel();
        }

        // Imprimir factura
        function printInvoice() {
            if (!currentInvoice) return;
            
            const printWindow = window.open('', '_blank');
            const invoiceHTML = document.getElementById('invoiceDocument').outerHTML;
            
            printWindow.document.write(`
                <!DOCTYPE html>
                <html>
                <head>
                    <title>Factura ${currentInvoice.number}</title>
                    <style>
                        body { font-family: Arial, sans-serif; margin: 0; padding: 20px; }
                        .invoice-document { max-width: 800px; margin: 0 auto; }
                        .doc-header { text-align: center; margin-bottom: 30px; padding-bottom: 20px; border-bottom: 2px solid #333; }
                        .doc-title { font-size: 28px; font-weight: bold; margin-bottom: 10px; }
                        .doc-number { font-size: 18px; color: #666; }
                        .doc-info { display: grid; grid-template-columns: 1fr 1fr; gap: 30px; margin-bottom: 30px; }
                        .info-section { border: 1px solid #ddd; padding: 20px; border-radius: 8px; }
                        .info-title { font-weight: bold; margin-bottom: 15px; }
                        .doc-table { width: 100%; border-collapse: collapse; margin: 20px 0; }
                        .doc-table th, .doc-table td { padding: 12px; text-align: left; border: 1px solid #ddd; }
                        .doc-table th { background: #f5f5f5; font-weight: bold; }
                        .text-right { text-align: right; }
                        .doc-total { background: #e8f5e8; font-weight: bold; }
                        .doc-footer { text-align: center; margin-top: 30px; padding-top: 20px; border-top: 1px solid #ddd; }
                        @media print {
                            body { margin: 0; }
                            .invoice-document { box-shadow: none; }
                        }
                    </style>
                </head>
                <body>
                    ${invoiceHTML}
                </body>
                </html>
            `);
            
            printWindow.document.close();
            printWindow.focus();
            printWindow.print();
            printWindow.close();
        }

        // Atajos de teclado
        document.addEventListener('keydown', function(e) {
            if (e.ctrlKey || e.metaKey) {
                switch(e.key) {
                    case 'n':
                        e.preventDefault();
                        showView('create');
                        break;
                    case 's':
                        e.preventDefault();
                        if (currentView === 'create') {
                            document.getElementById('invoiceForm').dispatchEvent(new Event('submit'));
                        }
                        break;
                    case 'p':
                        e.preventDefault();
                        if (currentView === 'view') {
                            printInvoice();
                        }
                        break;
                }
            }
            
            if (e.key === 'Escape') {
                if (currentView === 'create' || currentView === 'view') {
                    showView('dashboard');
                }
            }
        });

        // B√∫squeda en tiempo real (funcionalidad extra)
        function addSearchFunctionality() {
            const searchInput = document.createElement('input');
            searchInput.type = 'text';
            searchInput.placeholder = 'üîç Buscar facturas...';
            searchInput.className = 'form-input';
            searchInput.style.maxWidth = '300px';
            searchInput.style.marginBottom = '20px';
            
            searchInput.addEventListener('input', function(e) {
                const searchTerm = e.target.value.toLowerCase();
                const filteredInvoices = invoices.filter(invoice => 
                    invoice.number.toLowerCase().includes(searchTerm) ||
                    invoice.clientName.toLowerCase().includes(searchTerm)
                );
                
                // Actualizar lista con resultados filtrados
                updateFilteredInvoicesList(filteredInvoices);
            });
            
            // Agregar campo de b√∫squeda al dashboard
            const dashboardHeader = document.querySelector('.dashboard-header');
            dashboardHeader.appendChild(searchInput);
        }

        function updateFilteredInvoicesList(filteredInvoices) {
            const container = document.getElementById('invoicesList');
            
            if (filteredInvoices.length === 0) {
                container.innerHTML = `
                    <div class="empty-state">
                        <div class="empty-icon">üîç</div>
                        <h3 class="empty-title">No se encontraron resultados</h3>
                        <p class="empty-text">Intenta con otros t√©rminos de b√∫squeda</p>
                    </div>
                `;
                return;
            }
            
            const sortedInvoices = [...filteredInvoices].sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));
            
            container.innerHTML = `
                <div class="invoices-grid">
                    ${sortedInvoices.map(invoice => `
                        <div class="invoice-card" onclick="viewInvoice(${invoice.id})">
                            <div class="invoice-header">
                                <div class="invoice-number">${invoice.number}</div>
                                <div class="invoice-date">${formatDate(invoice.date)}</div>
                            </div>
                            <div class="client-name">üë§ ${invoice.clientName}</div>
                            <div class="invoice-amount">$${invoice.total.toLocaleString('es-ES', {minimumFractionDigits: 2})}</div>
                            <div class="card-actions" onclick="event.stopPropagation()">
                                <button class="action-btn btn-primary tooltip" onclick="editInvoice(${invoice.id})" 
                                        data-tooltip="Editar factura">
                                    ‚úèÔ∏è Editar
                                </button>
                                <button class="action-btn btn-info tooltip" onclick="viewInvoice(${invoice.id})" 
                                        data-tooltip="Ver factura">
                                    üëÄ Ver
                                </button>
                                <button class="action-btn btn-success tooltip" onclick="quickExportExcel(${invoice.id})" 
                                        data-tooltip="Exportar Excel">
                                    üìä Excel
                                </button>
                                <button class="action-btn btn-danger tooltip" onclick="deleteInvoice(${invoice.id})" 
                                        data-tooltip="Eliminar factura">
                                    üóëÔ∏è Eliminar
                                </button>
                            </div>
                        </div>
                    `).join('')}
                </div>
            `;
        }

        // Activar b√∫squeda despu√©s de cargar
        setTimeout(() => {
            if (invoices.length > 0) {
                addSearchFunctionality();
            }
        }, 1000);
    </script>
</body>
</html>
